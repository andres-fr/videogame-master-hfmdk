apply plugin: "java"
//added by andres
apply plugin: "scala" //*** https://github.com/libgdx/libgdx/wiki/Using-libgdx-with-Scala

targetCompatibility = 1.7
sourceCompatibility = 1.7
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// original
//sourceSets.main.java.srcDirs = [ "src/" ]
// suggestion in https://github.com/libgdx/libgdx/wiki/Using-libgdx-with-Scala
//sourceSets.main.scala.srcDirs = [ "src/" ]
// suggestion in https://chrismarks.wordpress.com/2013/07/31/compiling-a-mixed-scala-project-with-gradle/
//sourceSets.main.scala.srcDir "src/main/java"
//sourceSets.main.java.srcDirs = []
// some more help in http://stackoverflow.com/questions/23261075/compiling-scala-before-alongside-java-with-gradle


// MY WORKING SOLUTION:
sourceSets { // this is a dirty hack to allow crossed references between the .java files of the
    main { // main project and the scala files in <PATH>/scala. As explained here,
        scala { // http://stackoverflow.com/questions/23261075/compiling-scala-before-alongside-java-with-gradle
            srcDirs = ["src/"] // the "java" classes are compiled before the "scala" classes. This
        }                      // generates an error when java files try to access to scala classes.
        java {
            srcDirs = []
        }
    }
    test {
        scala {
            //srcDirs = ["game_tests/"]// for JUNIT http://shahmirj.com/blog/getting-junit-working-with-libgdx-in-gradle
        }
        java {
            srcDirs = ["src/game_tests/"]// for JUNIT http://shahmirj.com/blog/getting-junit-working-with-libgdx-in-gradle
        }
    }
}
eclipse.project {
    name = appName + "-core"
}

dependencies {
    compile 'com.mobidevelop.robovm:robovm-rt:2.1.0'
}